class Node{
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList{
    Node head;
    Node createNode(int data){
        return new Node(data);
    }


    LinkedList(){
        this.head = null;
    }

    void addAtEnd(int data){
        Node newNode = new Node(data);
        if(head == null){
            head  = newNode;
        }else{
            Node current = head;
            while( current.next != null){
                current = current.next;
            }
            current.next = newNode;
        }
    }

    void traverse(){
        Node current = head;
        while(current != null){
            System.out.print(current.data+"->");
            current = current.next;
        }
        System.out.print("null");

    }

    int sizeOfLinkedList(){
        int size = 0;
        Node current = head;
        while(current != null){
            size++;
            current = current.next;
        }
        return size;

    }

    void insertAtSpecific(int data ,int pos){
        int index = 1;
        Node current = head;
        Node newNode = new Node(data);

        while(current.next != null){
            index++;
            if(pos == index){
                newNode.next = current.next;
                current.next = newNode;
            }
            current = current.next;
        }

    }

    void addAtBeginning(int data){
        Node newNode = new Node(data);
        if(head == null){
            head = newNode;
        }
        newNode.next = head;
        head = newNode;

    }

    int  deleteAtBeginning(){
        if(head == null){
            return -1;
        }
        int temp = head.data;
        head = head.next;

        return temp;

    }

    int deleteAtEnd(){
        if(head == null){
            return -1;
        }
        Node current = head;

        while(current.next.next != null){
            current = current.next;
        }
        int temp = current.next.data;

        current.next = null;
        return temp;

    }
    int deleteAtSpecificePosition(int pos){
        Node current = head;
        if(head == null){
            return -1;
        }
        int index = 1;
        int temp = 0;
        while(current.next!= null){
            index++;

            if(index == pos){
                 temp = current.next.data;
                current.next =  current.next.next;
            }
            current = current.next;
        }
        return  temp;

    }



}


public class create {
    public static void main(String[] args) {
        LinkedList li = new LinkedList();

        li.addAtEnd(1);
        li.addAtEnd(2);

        li.addAtEnd(3);
        li.addAtBeginning(0);
        li.insertAtSpecific(25,3);



        li.traverse();
        System.out.println();
        System.out.println("Size of the linkedList:"+li.sizeOfLinkedList());

        System.out.println("deleted Element at Beginning :"+li.deleteAtBeginning());
        li.traverse();
        System.out.println();

        System.out.println("Deleted element in the end:"+li.deleteAtEnd());
        li.traverse();
        System.out.println();

        System.out.println("Size of the linkedList:"+li.sizeOfLinkedList());

        li.addAtEnd(3);
        li.traverse();
        System.out.println();

        System.out.println("Size of the linkedList:"+li.sizeOfLinkedList());
        System.out.println("Deleted element in the specific position:"+li.deleteAtSpecificePosition(2));
        li.traverse();
        System.out.println();

        System.out.println("Size of the linkedList:"+li.sizeOfLinkedList());




    }
}
